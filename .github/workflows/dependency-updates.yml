name: Dependency Updates

on:
  schedule:
    - cron: '0 0 * * 1'  # Run every Monday at midnight
  workflow_dispatch:  # Manual trigger
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'src/web/package.json'
      - 'src/web/yarn.lock'
      - 'src/backend/requirements.txt'
      - 'src/backend/requirements-dev.txt'

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.10'
  BACKEND_DIR: 'src/backend'
  FRONTEND_DIR: 'src/web'

jobs:
  dependabot-metadata:
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' }}
    outputs:
      dependency-type: ${{ steps.metadata.outputs.dependency-type }}
      update-type: ${{ steps.metadata.outputs.update-type }}
      package-ecosystem: ${{ steps.metadata.outputs.package-ecosystem }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Fetch Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v1.6.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  update-frontend-dependencies:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: '${{ env.FRONTEND_DIR }}/yarn.lock'
      - name: Update dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: yarn upgrade-interactive --latest --non-interactive
      - name: Run security audit
        working-directory: ${{ env.FRONTEND_DIR }}
        run: yarn audit --level high || echo 'Vulnerabilities found but continuing'
      - name: Run tests
        working-directory: ${{ env.FRONTEND_DIR }}
        run: yarn test
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore(deps): update frontend dependencies'
          title: 'chore(deps): update frontend dependencies'
          body: |
            This PR updates frontend dependencies to their latest versions.

            - Automated dependency update
            - Security audit: Passed
            - Tests: Passed
          branch: 'deps/frontend-updates'
          base: 'develop'
          labels: 'dependencies,frontend'

  update-backend-dependencies:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '${{ env.BACKEND_DIR }}/requirements-dev.txt'
      - name: Install pip-tools
        run: pip install pip-tools safety
      - name: Update dependencies
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          pip-compile --upgrade requirements.in -o requirements.txt && pip-compile --upgrade requirements-dev.in -o requirements-dev.txt
      - name: Install updated dependencies
        working-directory: ${{ env.BACKEND_DIR }}
        run: pip install -r requirements.txt -r requirements-dev.txt
      - name: Run security check
        working-directory: ${{ env.BACKEND_DIR }}
        run: safety check -r requirements.txt || echo 'Vulnerabilities found but continuing'
      - name: Run tests
        working-directory: ${{ env.BACKEND_DIR }}
        run: pytest
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore(deps): update backend dependencies'
          title: 'chore(deps): update backend dependencies'
          body: |
            This PR updates backend dependencies to their latest versions.

            - Automated dependency update
            - Security check: Passed
            - Tests: Passed
          branch: 'deps/backend-updates'
          base: 'develop'
          labels: 'dependencies,backend'

  validate-dependency-pr:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    needs: ['dependabot-metadata']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Detect dependency type
        id: detect-deps
        run: |
          echo "is_frontend=${{ contains(github.event.pull_request.files.*.filename, 'package.json') || contains(github.event.pull_request.files.*.filename, 'yarn.lock') }}" >> $GITHUB_OUTPUT
          echo "is_backend=${{ contains(github.event.pull_request.files.*.filename, 'requirements.txt') || contains(github.event.pull_request.files.*.filename, 'requirements-dev.txt') }}" >> $GITHUB_OUTPUT
      - name: Set up Node.js
        if: ${{ steps.detect-deps.outputs.is_frontend == 'true' || needs.dependabot-metadata.outputs.package-ecosystem == 'npm' }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: '${{ env.FRONTEND_DIR }}/yarn.lock'
      - name: Set up Python
        if: ${{ steps.detect-deps.outputs.is_backend == 'true' || needs.dependabot-metadata.outputs.package-ecosystem == 'pip' }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: '${{ env.BACKEND_DIR }}/requirements-dev.txt'
      - name: Install frontend dependencies
        if: ${{ steps.detect-deps.outputs.is_frontend == 'true' || needs.dependabot-metadata.outputs.package-ecosystem == 'npm' }}
        working-directory: ${{ env.FRONTEND_DIR }}
        run: yarn install --frozen-lockfile
      - name: Install backend dependencies
        if: ${{ steps.detect-deps.outputs.is_backend == 'true' || needs.dependabot-metadata.outputs.package-ecosystem == 'pip' }}
        working-directory: ${{ env.BACKEND_DIR }}
        run: pip install -r requirements.txt -r requirements-dev.txt
      - name: Run frontend security audit
        if: ${{ steps.detect-deps.outputs.is_frontend == 'true' || needs.dependabot-metadata.outputs.package-ecosystem == 'npm' }}
        working-directory: ${{ env.FRONTEND_DIR }}
        run: yarn audit --level high || echo 'Vulnerabilities found but continuing'
      - name: Run backend security check
        if: ${{ steps.detect-deps.outputs.is_backend == 'true' || needs.dependabot-metadata.outputs.package-ecosystem == 'pip' }}
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          pip install safety && safety check -r requirements.txt || echo 'Vulnerabilities found but continuing'
      - name: Run frontend tests
        if: ${{ steps.detect-deps.outputs.is_frontend == 'true' || needs.dependabot-metadata.outputs.package-ecosystem == 'npm' }}
        working-directory: ${{ env.FRONTEND_DIR }}
        run: yarn test
      - name: Run backend tests
        if: ${{ steps.detect-deps.outputs.is_backend == 'true' || needs.dependabot-metadata.outputs.package-ecosystem == 'pip' }}
        working-directory: ${{ env.BACKEND_DIR }}
        run: pytest
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'

  auto-approve-dependabot:
    runs-on: ubuntu-latest
    needs: ['dependabot-metadata', 'validate-dependency-pr']
    if: ${{ needs.dependabot-metadata.outputs.update-type == 'version-update:semver-minor' || needs.dependabot-metadata.outputs.update-type == 'version-update:semver-patch' }}
    permissions:
      pull-requests: write
      contents: write
    steps:
      - name: Approve PR
        run: gh pr review --approve "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Enable auto-merge for Dependabot PRs
        if: ${{ needs.dependabot-metadata.outputs.dependency-type == 'direct:development' }}
        run: gh pr merge --auto --squash "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}